name: Build, Test, and Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: [16.2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up latest Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Build
        run: |
          cd Sample
          xcodebuild build -scheme Sample -destination 'platform=macOS'

  test:
    name: Test
    runs-on: macos-latest
    needs: build
    strategy:
      matrix:
        xcode: [16.2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up latest Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Run Tests
        run: |
          cd Sample
          xcodebuild test -scheme Sample -destination 'platform=macOS' -enableCodeCoverage YES -derivedDataPath ../DerivedData

  coverage:
    name: Coverage
    runs-on: macos-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up latest Xcode
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
      - name: Show and save Xcode coverage summary
        run: |
          cd Sample
          XCRESULT=$(ls -td DerivedData/Logs/Test/*.xcresult | head -n1)
          xcrun xccov view --report "$XCRESULT" > coverage.txt
          cat coverage.txt
      - name: Post coverage summary as PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf8');
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Xcode Coverage Summary`
